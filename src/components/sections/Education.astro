---
import i18next, { t } from "i18next";

import Heading from "../ui/Heading.astro";
import { education } from "@/data/education";
import { TbSchool, TbCertificate, TbExternalLink } from "react-icons/tb";
import type { Education } from "../../types/Education";
import Section from "../ui/Section.astro";

// sort education by date descending, put degrees first

education.sort((a, b) => {
  if (a.date instanceof Date && b.date instanceof Date) {
    return b.date.getTime() - a.date.getTime();
  } else if (a.date instanceof Date) {
    return -1;
  } else if (b.date instanceof Date) {
    return 1;
  } else {
    return 0;
  }
});

const degrees = education.filter((item) => "degree_" + i18next.language in item);
const nonDegrees = education.filter((item) => !("degree_" + i18next.language in item));

const educationSorted = [...degrees, ...nonDegrees];
---

<Section id="education">
  <Heading level={2}>{t("sections.education.title")}</Heading>

  <div class="flex flex-col divide-y-2">
    {
      educationSorted.map((item) => (
        <div class="flex items-center max-sm:flex-wrap py-4">
          <div class="rounded-full border-2 border-gray-500 p-2 mr-2">
            {"degree_" + i18next.language in item ? (
              <TbSchool className="text-3xl text-gray-500" />
            ) : (
              <TbCertificate className="text-3xl text-gray-500" />
            )}
          </div>
          <div class="flex-1">
            <div class="text-lg font-semibold">{item.name}</div>
            <div class="text-sm">
              {"issuer" in item ? (
                <>
                  {item.issuer}
                  <a
                    class="border-2 border-blue-500 text-blue-500 rounded inline-flex items-center px-2 py-1 ml-2 hover:bg-blue-500 hover:text-white"
                    target="_blank"
                    href={item.link}
                  >
                    {t("sections.education.show_credential")}
                    <TbExternalLink />
                  </a>
                </>
              ) : (
                `${item[("degree_" + i18next.language) as keyof Education]}, ${
                  item[("area_" + i18next.language) as keyof Education]
                }`
              )}
            </div>
          </div>
          <div class="text-sm text-gray-500 max-sm:basis-full max-sm:text-right max-sm:pt-4">
            {item.date instanceof Date
              ? item.date.toLocaleString(i18next.language, { month: "long", year: "numeric" })
              : item.date.start.toLocaleString(i18next.language, { month: "long", year: "numeric" }) +
                " - " +
                (item.date.end?.toLocaleString(i18next.language, { month: "long", year: "numeric" }) ??
                  t("sections.education.present"))}
          </div>
        </div>
      ))
    }
  </div>
</Section>
